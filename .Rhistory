par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
pdf('icnsa_plot.pdf', width = 12, height = 5)
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(2, 0, 0, 0))
len = length(claim_data$claim.all)
xts::plot.xts(claim_data$claim.all$icnsa[len - 902:15], main = NA)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
out.dir="/Users/ydd/Documents/macroEcon/code_essential/output/draft-nowcast/"
out.dir = "/Users/ydd/Dropbox/prism/code_essential/output/draft-nowcast/"
setwd(out.dir)
library(reshape2)
library(xts)
library(xtable)
library(PRISM)
claim_data = PRISM::load_claim_data()
source('../print_bold.R')
forecast_summary<-function(forecast_xts, claim_data){
start = which(time(claim_data$claim.all) == time(xts::first(forecast_xts)))
end = which(time(claim_data$claim.all) == time(xts::last(forecast_xts)))
diff=as.numeric(forecast_xts)-claim_data$claim.all$icnsa[start:end]
diff.naive=as.numeric(claim_data$claim.all$icnsa[start:end-1])-claim_data$claim.all$icnsa[start:end]
Years=as.numeric(format(time(diff),'%Y'))
yearly=2007:2016
summary=array(dim=c(2,1+length(yearly)))
rownames(summary)=c('RMSE','MAE')
colnames(summary)=c('07-16',yearly)
summary[1,1]=sqrt(mean(diff[Years%in%yearly]^2)/mean(diff.naive[Years%in%yearly]^2))
summary[2,1]=mean(abs(diff[Years%in%yearly]))/mean(abs(diff.naive[Years%in%yearly]))
for(k in 1:length(yearly)){
summary[1,k+1]=sqrt(mean(diff[Years==yearly[k]]^2)/mean(diff.naive[Years==yearly[k]]^2))
summary[2,k+1]=mean(abs(diff[Years==yearly[k]]))/mean(abs(diff.naive[Years==yearly[k]]))
}
summary
}
# bsts evaluation
bsts_prediction_df<-function(foldername){
setwd(paste0(out.dir,foldername))
allfiles = list.files()
prediction.bsts = data.frame()
for (k in 1:length(allfiles)){
single.date = read.csv(allfiles[k])
colnames(single.date)[1] = 'method'
single.date$date = substr(allfiles[k],1,10)
prediction.bsts = rbind(prediction.bsts, single.date)
}
prediction.bsts = dcast(prediction.bsts, date~method, value.var = colnames(prediction.bsts)[2])
prediction.bsts = xts(prediction.bsts[,-1], as.Date(prediction.bsts$date))
prediction.bsts
}
df.all=data.frame()
# bsts evaluation
prediction.bsts = bsts_prediction_df('bsts-rolling')
df.melted=melt(forecast_summary(prediction.bsts$median, claim_data), id=c("loss", "period"))
df.melted$method = 'BSTS'
df.all=rbind(df.all, df.melted)
prediction.bats = bsts_prediction_df('bats')
df.melted=melt(forecast_summary(prediction.bats[,1], claim_data), id=c("loss", "period"))
df.melted$method = 'BATS'
df.all=rbind(df.all, df.melted)
prediction.tbats = bsts_prediction_df('tbats')
df.melted=melt(forecast_summary(prediction.tbats[,1], claim_data), id=c("loss", "period"))
df.melted$method = 'TBATS'
df.all=rbind(df.all, df.melted)
#prediction.bsts.n = bsts_prediction_df('bsts-no-regressor')
#df.melted=melt(forecast_summary(prediction.bsts.n[,1], claim_data), id=c("loss", "period"))
#df.melted$method = 'BSTS-no-regressor'
#df.all=rbind(df.all, df.melted)
# sargo evaluation
prediction.sargo = bsts_prediction_df('sargo-original-sameL1')
df.melted=melt(forecast_summary(prediction.sargo[,1], claim_data), id=c("loss", "period"))
df.melted$method = 'PRISM'
df.all=rbind(df.all, df.melted)
prediction.sar = bsts_prediction_df('sar-original')
df.melted=melt(forecast_summary(prediction.sar[,1], claim_data), id=c("loss", "period"))
df.melted$method = 'PRISM w/o x_t'
df.all=rbind(df.all, df.melted)
# nowcast summary table
df_summary_table<-function(df.all, loss){
rmse_table = df.all[df.all$Var1==loss,]
rmse_table = dcast(rmse_table, method~Var2, value.var = 'value')
rownames(rmse_table) = rmse_table$method
rmse_table[,-1]
}
rmse_table = df_summary_table(df.all, 'RMSE')
mae_table = df_summary_table(df.all, 'MAE')
rmse_table
mae_table
printbold(xtable(rmse_table,digits=3), each = "column", min = T)
printbold(xtable(mae_table,digits=3), each = "column", min = T)
# cbind 5 methods
#model_names = c('BSTS', 'Eq. (4.6)', 'PRISM', 'BATS', 'TBATS')
#forecast_xts = cbind(prediction.bsts$median, prediction.sar[,1], prediction.sargo[,1], prediction.bats[,1], prediction.tbats[,1])
model_names = c('PRISM', 'BSTS', 'PRISM w/o x_t', 'TBATS', 'BATS')
forecast_xts = cbind(prediction.sargo[,1], prediction.bsts$median, prediction.sar[,1], prediction.tbats[,1], prediction.bats[,1])
colnames(forecast_xts) = model_names
# eliminate 2007
#forecast_xts = forecast_xts[-(1:52)]
# nowcast mae summary plot
setwd(out.dir)
start = which(time(claim_data$claim.all) == time(xts::first(forecast_xts)))
end = which(time(claim_data$claim.all) == time(xts::last(forecast_xts)))
forecast_diff_xts = forecast_xts
for(i in 1:dim(forecast_xts)[2]){
forecast_diff_xts[,i] = forecast_xts[,i] - claim_data$claim.all$icnsa[start:end]
}
xts::plot.xts(claim_data$claim.all$icnsa[start:end], type='n', main = NA)
box()
library('RColorBrewer')
#display.brewer.all()
#brewer.pal(5,'Set2')
#color_code <- c("red", "goldenrod3","limegreen", "blue","grey48")
color_code <- brewer.pal(5,'Set1')
line_width <- c(1.5,1,1,1,1)
line_type <- c(1,1,1,1,1)
yt_lwd = 2
lines(claim_data$claim.all$icnsa[start:end], lwd = yt_lwd)
for (i in 1:length(model_names)){
lines(forecast_xts[,model_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend(xts::.index(forecast_xts)[300], 1e6,c("unemployment initial claims",model_names),
col=c(1, color_code),
lwd=c(yt_lwd, line_width),
lty=c(1,line_type), cex=1)
multiple_xts = cumsum(abs(forecast_diff_xts))
model_names = colnames(multiple_xts)
pdf('cum_absolute_error.pdf', width = 11, height = 8)
##set up the plot
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(0, 0, 0, 0))
#Set the area up for 2 plots
par(mfrow = c(2, 1))
#color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(model_names))
line_type <- c(1,3:6)
i=4
xts::plot.xts(multiple_xts[,i], xaxt='n', main = NA, ylab='', type='n', ann = TRUE)
box()
for (i in 1:length(model_names)){
lines(multiple_xts[,model_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
#text(100,1e5, labels = model_names)
legend("bottomright", model_names, col= color_code, lwd=line_width, lty=line_type, cex=0.8)
mtext(text="cumulative absolute error", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
mtext(text="unemployment initial claims", side=2, line=2.3)
box()
dev.off()
library(ggplot2)
library(reshape2)
library(directlabels)
library(grid)
require(gridExtra)
pdf('cum_absolute_error.pdf', width = 11, height = 8)
df_xts = as.data.frame(multiple_xts)
df_xts$date = time(multiple_xts)
melted_xts = melt(df_xts, id='date')
p1 = ggplot(melted_xts,aes(x=date,y=value, colour=variable)) + scale_colour_brewer('variable', palette = 'Set1') +
scale_x_date(lim = c(as.Date("2007-1-1"), as.Date("2017-6-15"))) +
geom_line(aes(linetype=variable), size=1.01) +
scale_linetype_manual(values = c("solid", "dotted","dotdash","dashed","twodash")) +
xlab("Date") + ylab("cumulative absolute error")+
theme_bw() +
theme(legend.position="none", axis.text.x=element_blank(), axis.title.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0), size = rel(1.3))) +
geom_dl(aes(label = variable), method = list(dl.combine("last.points"), cex = 0.75))
df_xts = as.data.frame(claim_data$claim.all$icnsa[start:end])
df_xts$date = time(claim_data$claim.all$icnsa[start:end])
p2 = ggplot(df_xts,aes(x=date,y=icnsa)) +
geom_line(size=1.01) +
xlab("Date") + ylab("unemployment initial claims")+
scale_x_date(lim = c(as.Date("2007-1-1"), as.Date("2017-6-15"))) +
theme_bw() +
theme(legend.position="none", axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0), size = rel(1.3)))
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
dev.off()
# nowcast rmse plot by year
df.byYear = df.all[df.all$Var1=='RMSE'&df.all$Var2!='07-16',]
colnames(df.byYear)[2] = 'year'
mat.byYear = dcast(df.byYear, method~year)
rownames(mat.byYear) = mat.byYear$method
mat.byYear = mat.byYear[,-1]
mat.byYear = as.matrix(mat.byYear)
mat.byYear = mat.byYear[c(3,2,4,5,1),]
library('RColorBrewer')
#display.brewer.all()
# plotting settings -------------------------------------------------------
#ylim <- range(mat.byYear)*c(1,1.5)
angle1 <- c(45,135,45, 135, 45)
angle2 <- c(135,135,135, 135, 45)
density1 <- 10*c(10,1,2,3,4)
density2 <- 10*c(10,1,2,3,4)
col <- brewer.pal(5,"Set1")
pdf('rmse_by_year.pdf', width = 10, height = 4)
par(mar=c(4,4,1,1))
barplot(mat.byYear, beside=TRUE, ylim = c(0, 1.5), col=col, angle=angle1, density=density1, ylab = 'RMSE', xlab = 'Year')
barplot(mat.byYear, add=TRUE, beside=TRUE, ylim = c(0, 1.5), col=col, angle=angle2, density=density2)
legend("top", legend=rownames(mat.byYear), ncol=5, fill=col, angle=angle1, density=density1)
par(bg="transparent")
legend("top", legend=rownames(mat.byYear), ncol=5, fill=col, angle=angle2, density=density2)
dev.off()
#library(ggplot2)
#pdf('rmse_by_year.pdf', width = 10, height = 4)
#df.byYear = df.all[df.all$Var1=='RMSE'&df.all$Var2!='07-16',]
#colnames(df.byYear)[2] = 'year'
#df.byYear$year = as.Date(paste0(as.character(df.byYear$year),'-01-01'))
#df.byYear$method = factor(df.byYear$method, levels=model_names )
#ggplot(df.byYear, aes(x=year, y=value, fill=method)) + scale_fill_brewer('method', palette = 'Set1') +
#  geom_bar(aes(linetype = method), col = "black", position = "dodge", stat="identity", width=0.7) +
#  scale_linetype_manual(values = c("solid", "dotted","dotdash","dashed","twodash")) +
#  theme_bw() + xlab('Year') + ylab('RMSE') +
#  ggtitle("Yearly Performance of Nowcasting")
#ggplot(df.byYear, aes(x=year, y=value, colour=method, shape=method)) + scale_colour_brewer('method', palette = 'Set1') +
#  scale_x_date(lim = c(as.Date("2007-01-01"), as.Date("2016-04-01"))) +
#  geom_point() + geom_line() + xlab('Year') + ylab('RMSE') + ylim(c(0,1.3)) +
#  theme_bw() + ggtitle("Yearly Performance of Nowcasting") +
#  geom_dl(aes(label = method), method = list(dl.combine("last.points"), cex = 0.5, hjust = -0.2))
#dev.off()
#library('RColorBrewer')
#display.brewer.all()
#brewer.pal(5,'Set2')
library('PRISM')
sargoData = PRISM::load_5y_search_data('0610')
T_for_plot = sargoData$allSearch[,c(3,19,1,15)]
GT_names = colnames(GT_for_plot)
GT_names = c("file unemployment", "unemployment office", "california unemployment", "unemployment florida")
colnames(GT_for_plot) = GT_names
start = which(time(claim_data$claim.all) == time(xts::first(GT_for_plot)))
end = which(time(claim_data$claim.all) == time(xts::last(GT_for_plot)))
out.dir = "/Users/ydd/Dropbox/prism/code_essential/output/draft-nowcast/"
setwd(out.dir)
pdf('GT_plot.pdf', width = 11, height = 8)
##set up the plot
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(0, 0, 0, 0))
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
pdf('icnsa_plot.pdf', width = 12, height = 5)
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(2, 0, 0, 0))
len = length(claim_data$claim.all)
xts::plot.xts(claim_data$claim.all$icnsa[len - 902:15], main = NA)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
# figure 2 in paper
library('ggplot2')
library('PRISM')
sargoData = PRISM::load_5y_search_data('0610')
GT_for_plot = sargoData$allSearch[,c(3,19,1,15)]
GT_names = colnames(GT_for_plot)
GT_names = c("file unemployment", "unemployment office", "california unemployment", "unemployment florida")
colnames(GT_for_plot) = GT_names
start = which(time(claim_data$claim.all) == time(xts::first(GT_for_plot)))
end = which(time(claim_data$claim.all) == time(xts::last(GT_for_plot)))
out.dir = "/Users/ydd/Dropbox/prism/code_essential/output/draft-nowcast/"
setwd(out.dir)
pdf('GT_plot.pdf', width = 11, height = 8)
##set up the plot
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(0, 0, 0, 0))
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
pdf('icnsa_plot.pdf', width = 12, height = 5)
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(2, 0, 0, 0))
len = length(claim_data$claim.all)
xts::plot.xts(claim_data$claim.all$icnsa[len - 902:15], main = NA)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
folders_5y = list.files(system.file("extdata/GTdata5y", package = "SARGo"))
sargoData=load_5y_data(folders_5y[2])
GT_for_plot = sargoData$allSearch[,c(3,19,1,15)]
GT_names = colnames(GT_for_plot)
GT_names = c("file unemployment", "unemployment office", "california unemployment", "unemployment florida")
colnames(GT_for_plot) = GT_names
start = which(time(claim_data$claim.all) == time(xts::first(GT_for_plot)))
end = which(time(claim_data$claim.all) == time(xts::last(GT_for_plot)))
out.dir="/Users/ydd/Documents/macroEcon/tex/"
setwd(out.dir)
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
##set up the plot
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(0, 0, 0, 0))
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
GT_for_plot
GT_for_plot = sargoData$allSearch[,c(3,19,1,15)]
GT_names = colnames(GT_for_plot)
GT_names = c("file unemployment", "unemployment office", "california unemployment", "unemployment florida")
colnames(GT_for_plot) = GT_names
head(GT_for_plot)
start = which(time(claim_data$claim.all) == time(xts::first(GT_for_plot)))
end = which(time(claim_data$claim.all) == time(xts::last(GT_for_plot)))
claim_data$claim.all
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
dev.off()
folders_5y = list.files(system.file("extdata/GTdata5y", package = "SARGo"))
sargoData=load_5y_data(folders_5y[2])
GT_for_plot = sargoData$allSearch[,c(3,19,1,15)]
GT_names = colnames(GT_for_plot)
GT_names = c("file unemployment", "unemployment office", "california unemployment", "unemployment florida")
colnames(GT_for_plot) = GT_names
start = which(time(claim_data$claim.all) == time(xts::first(GT_for_plot)))
end = which(time(claim_data$claim.all) == time(xts::last(GT_for_plot)))
out.dir="/Users/ydd/Documents/macroEcon/tex/"
setwd(out.dir)
pdf('GT_plot.pdf', width = 11, height = 8)
##set up the plot
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(0, 0, 0, 0))
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
pdf('icnsa_plot.pdf', width = 12, height = 5)
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(2, 0, 0, 0))
len = length(claim_data$claim.all)
xts::plot.xts(claim_data$claim.all$icnsa[len - 902:15], main = NA)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
library('devtools')
library('roxygen2')
setwd("/Users/ydd/Documents/macroEcon/package")
setwd('./SARGo')
document()
setwd('..')
install('SARGo')
folders_5y = list.files(system.file("extdata/GTdata5y", package = "SARGo"))
sargoData=load_5y_data(folders_5y[2])
GT_for_plot = sargoData$allSearch[,c(3,19,1,15)]
GT_names = colnames(GT_for_plot)
GT_names = c("file unemployment", "unemployment office", "california unemployment", "unemployment florida")
colnames(GT_for_plot) = GT_names
start = which(time(claim_data$claim.all) == time(xts::first(GT_for_plot)))
end = which(time(claim_data$claim.all) == time(xts::last(GT_for_plot)))
out.dir="/Users/ydd/Documents/macroEcon/tex/"
setwd(out.dir)
pdf('GT_plot.pdf', width = 11, height = 8)
##set up the plot
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(0, 0, 0, 0))
#Set the area up for 2 plots
par(mfrow = c(2, 1))
xts::plot.xts(GT_for_plot[,1], xaxt='n', main = NA, ylab='', ylim = c(5,100))
box()
color_code <- c("red", "goldenrod3","limegreen", "blue","purple")
line_width <- rep(1.5, length(GT_names))
line_type <- rep(1, length(GT_names))
for (i in 1:length(GT_names)){
lines(GT_for_plot[,GT_names[i]], col=color_code[i], lwd=line_width[i], lty=line_type[i])
}
legend("topleft", GT_names, col= color_code, lwd=line_width, lty=line_type, cex=1.2)
mtext(text="Google Trends", side=2, line=2.3)
xts::plot.xts(claim_data$claim.all$icnsa[start:end], main = NA)
lines(claim_data$claim.all$icnsa[start:end], lwd = 1.5)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
pdf('icnsa_plot.pdf', width = 12, height = 5)
par(pty="m", plt=c(0.1, 0.9, 0.1, 0.9), omd=c(0.1, 0.95, 0.1, 0.95), mar=c(2, 0, 0, 0))
len = length(claim_data$claim.all)
xts::plot.xts(claim_data$claim.all$icnsa[len - 902:15], main = NA)
mtext(text="unemployment initial claims", side=2, line=2.3)
dev.off()
#library('devtools')
#library('roxygen2')
#setwd("/Users/ydd/Documents/macroEcon/package")
#setwd('./PRISM')
#document()
#setwd('..')
#install('PRISM')
library('PRISM')
# example of out-of-sample evaluation
claim_data = PRISM::load_claim_data()
prism_prediction = PRISM::back_test()
PRISM::evaluation_table(claim_data, prism_prediction)
# example for single week prism.
folders_5y = list.files(system.file("extdata/search_data_5year", package = "PRISM"))
prism.fit = list()
folder = folders_5y[1]
prism_data = load_5y_search_data(folder)
data = prism_data$claim.data[1:200]
data[200] = NA
data.early = prism_data$claim.earlyData
GTdata = prism_data$allSearch[1:200]
result = prism(data, data.early, GTdata)
result$pred
# example for plot
data
prism_data = load_5y_search_data('0610')
data = prism_data$claim.data[1:200]
data
data.early = prism_data$claim.earlyData #
tail(data.early)
result = prism(data, data.early, GTdata)
result$pred
prism_data = load_5y_search_data('0610')
data = prism_data$claim.data[1:200] # load claim data from 2006-01-07 to 2009-10-31
data[200] = NA # delete the data for the latest date and try to nowcast it.
data.early = prism_data$claim.earlyData # load claim prior to 2006
GTdata = prism_data$allSearch[1:200] # load Google trend data from 2006-01-07 to 2009-10-31
result = prism(data, data.early, GTdata)
result$pred
PRISM::evaluation_table(claim_data, prism_prediction)
claim_data = load_claim_data()
library(PRISM)
library(PRISM)
?back_test
?back_test
library(PRISM)
?back_test
devtools::load_all(".")
?back_test
?prism
library('argo')
library(PRISM)
library(PRISM)
library(PRISM)
?prism
library(devtools)
check(cleanup = FALSE,args = c('--no-examples'),manual = TRUE,path = getwd())
check(cleanup = FALSE,args = c('--no-examples'),manual = TRUE,path = getwd())
check(args = c('--no-examples'),manual = TRUE,path = getwd())
devtools::install_deps(dependencies = TRUE)
library(PRISM.forecast)
install.packages(roxygen2)
install.packages('roxygen2')
